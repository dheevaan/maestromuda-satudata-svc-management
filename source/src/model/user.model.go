package model

import (
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Generated by https://quicktype.io

type User struct {
	MetadataWithID `bson:",inline"`

	RoleId   string `json:"roleId" bson:"roleId,omitempty"`
	Email    string `json:"email,omitempty" bson:"email,omitempty"`
	Password string `json:"password,omitempty" bson:"password,omitempty"`
	Username string `json:"username,omitempty" bson:"username,omitempty"`
	Fullname string `json:"fullname,omitempty" bson:"fullname,omitempty"`
	Status   string `json:"status,omitempty" bson:"status,omitempty"`
}

type User_Profil struct {
	MetadataWithID `bson:",inline"`
	Email          *string `json:"email,omitempty" bson:"email,omitempty"`
	Username       string  `json:"username,omitempty" bson:"username,omitempty"`
	Fullname       string  `json:"fullname,omitempty" bson:"fullname,omitempty"`
}

type User_View struct {
	User `bson:",inline"`
	Role `json:"role" bson:"role,omitempty"`
}

type User_Search struct {
	//? Regex
	Search   string                   `json:"search"`
	SearchBy []string                 `json:"searchBy"`
	Fullname string                   `json:"fullname"`
	Filter   []map[string]interface{} `json:"filter"`

	Request
}

func (this *User_Search) HandleFilter(listFilterAnd *[]bson.M) {
	if search := this.Search; search != "" {
		filterOr := bson.M{}
		listFilterOr := []bson.M{}
		for _, searchField := range this.SearchBy {
			listFilterOr = append(listFilterOr, bson.M{searchField: primitive.Regex{Pattern: search, Options: "i"}})
		}

		if len(listFilterOr) > 0 {
			filterOr["$or"] = listFilterOr
		}
		*listFilterAnd = append(*listFilterAnd, filterOr)
	}
	if filter := this.Filter; len(filter) > 0 {
		filterAnd := bson.M{}
		filtersAnd := []bson.M{}
		for _, filterOpt := range filter {
			filtersAnd = append(filtersAnd, bson.M{filterOpt["field"].(string): filterOpt["value"]})
		}

		if len(filtersAnd) > 0 {
			filterAnd["$and"] = filtersAnd
		}
		*listFilterAnd = append(*listFilterAnd, filterAnd)
	}
	if search := this.Fullname; search != "" {
		*listFilterAnd = append(*listFilterAnd, bson.M{"fullname": primitive.Regex{Pattern: search, Options: "i"}})
	}
}

type User_Login struct {
	Username string `json:"username,omitempty"`
	Password string `json:"password,omitempty"`
}

type User_ResetPassword struct {
	ID              string `json:"id,omitempty" bson:"_id,omitempty"`
	OldPassword     string `json:"oldPassword,omitempty"`
	NewPassword     string `json:"newPassword,omitempty"`
	ConfirmPassword string `json:"confirmpassword" bson:"confirmpassword"`
}

type User_ResetPassword_Admin struct {
	ID              string `json:"id,omitempty" bson:"_id,omitempty"`
	NewPassword     string `json:"NewPassword,omitempty" bson:"password,omitempty"`
	ConfirmPassword string `json:"confirmpassword" bson:"confirmpassword"`
}

type Resp_JwtToken struct {
	Token  string    `json:"token,omitempty"`
	Expire time.Time `json:"expire,omitempty"`
}

type Resp_User_Login struct {
	User *User         `json:"user,omitempty"`
	Auth Resp_JwtToken `json:"auth,omitempty"`
}

type Resp_User_Enc struct {
	Data Resp_User_Login `json:"data,omitempty"`
}
