package model

import (
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Generated by https://quicktype.io

type DataSet struct {
	MetadataWithID `bson:",inline"`
	DataInfo `bson:",inline"`
	DataConfig	`bson:",inline"`
}

type DataInfo struct {
	Author      string `json:"author" bson:"author"`
	DataName    string `json:"data_name" bson:"data_name"`
	Category    string `json:"category" bson:"category"`
	DataSource  string `json:"data_source" bson:"data_source"`
	Description string `json:"data_description" bson:"data_description"`
}

type DataConfig struct {
	DataTable              bool                     `json:"data_table" bson:"data_table"`
	UploadFile             bool                     `json:"upload_file" bson:"upload_file"`
	IsRequiredID           bool                     `json:"is_required_id" bson:"is_required_id"`
	IsRequiredProvinceCode bool                     `json:"is_required_province_code" bson:"is_required_province_code"`
	IsRequiredProvinceName bool                     `json:"is_required_province_name" bson:"is_required_province_name"`
	Column                 []map[string]interface{} `json:"column" bson:"column"`
	ValueRow               map[string]interface{}   `json:"value_row" bson:"value_row"`
}

type Column struct {
	ColumnName string `json:"column_name" bson:"column_name"`
	AliasName  string `json:"alias_name" bson:"alias_name"`
	DataType   string `json:"data_type" bson:"data_type"`
}

type DataSet_View struct {
	DataSet `bson:",inline"`
}

type DataSet_Search struct {
	//? Regex
	Search   string                   `json:"search"`
	SearchBy []string                 `json:"searchBy"`
	Filter   []map[string]interface{} `json:"filter"`

	Request
}

func (this *DataSet_Search) HandleFilter(listFilterAnd *[]bson.M) {
	if search := this.Search; search != "" {
		filterOr := bson.M{}
		listFilterOr := []bson.M{}
		for _, searchField := range this.SearchBy {
			listFilterOr = append(listFilterOr, bson.M{searchField: primitive.Regex{Pattern: search, Options: "i"}})
		}

		if len(listFilterOr) > 0 {
			filterOr["$or"] = listFilterOr
		}
		*listFilterAnd = append(*listFilterAnd, filterOr)
	}
	if filter := this.Filter; len(filter) > 0 {
		filterAnd := bson.M{}
		filtersAnd := []bson.M{}
		for _, filterOpt := range filter {
			filtersAnd = append(filtersAnd, bson.M{filterOpt["field"].(string): primitive.Regex{Pattern: filterOpt["value"].(string), Options: "i"}})
		}

		if len(filtersAnd) > 0 {
			filterAnd["$and"] = filtersAnd
		}
		*listFilterAnd = append(*listFilterAnd, filterAnd)
	}
}
